
HOW TO RUN LOCM
-----------------------------------

1. INTRODUCTION

LOCM is a Prolog program that inputs sets of example 'plans' and outputs a PDDL model that could be used with a AI planner to solve a planning problem.

This tutorial will show you how to use LOCM. Unzip this directory onto a Linux machine.  You will see the following contents including this file:

 --ex
|
 --graph
|
 --INSTRUCTIONS.txt
|
 --locm.pl
|
 --out
|
 --prolog
|
 --original

ex - contains lots of files of example plans for various domains e.g. blocks, tyre, rocket.. These have been generated by letting a planner start with an initial state, then doing a random walk using a hand crafted domain model, applying instances of operators in the model at random. It is this hand crafted domain model that LOCM will use the example plans to learn!
graph - will include the output which will allow the Linux Graphviz program to draw the induced finite state machines for each object class on the screen (this will not be possible if you are 'ssh'-ing into a Linux machine).
locm.pl - the driver
out - the directory which holds the pddl output of LOCM. Currently this is EMPTY.
prolog - source code
original - these are some of the original domain models - the ones that LOCM is trying to learn!

2.  TO GET STARTED

You will need to have 'swipl' installed on your Linux machine - this is an installation of Prolog and is fairly standard. You will also need to know how to edit files in Linux.
Using a COMMAND PROMPT, goto the locmfeb directory. Issue the command:

swipl

this wil start  Prolog. Then issue the command:

[locm].

this will load in the Prolog program.   Then issue the command:

go.

this will run LOCM. The prolog code is configured to induce the 
'tyre' world domain model. Two things should happen:

a) in the 'out' directory a bunch of files will appear.  These will include the learned tyre world domain model under the name 
tyre_dom.pl
To come out of Prolog, type 'halt.' or issue a Cntl D. Then you can view the tyre_dom.pddl file in the 'out' directory.

b) [If you have Graphviz installed and you are not using a remote window via ssh] A Graphviz window will pop up which contains all the induced machines for each object class found in the examples. For example two wrenches were found - wrench0 and wrench1, three wheels were found - wheel, wheel1 and wheel2.
To USE tyre_dom.pl with an AI planning engine you would need to create an initial state and goal condition. Rather than doing this, we will experiment with creating other domain models and testing LOCM with different sets of examples.

3.  TO INVESTIGATE THE OUTPUT

You may want to review the lecture notes on LOCM from our last lecture to remind yourself what is going on.
Open the tyre domain pddl and study it in conjunction with the GraphViz output.  
Each predicate declared is in fact a NODE in the finite state machine of each machine (boot, hub, jack, nuts, wheel, wrench.. etc). 

Exercise 1.  The predicates in the REAL hand crafted tyre domain are as follows:
    (closed ?boot1 - boot)
    (open ?boot1 - boot)
    (tight ?nuts1 - nuts ?hub1 - hub)
    (loose ?nuts1 - nuts ?hub1 - hub)
    (have_nuts ?nuts1 - nuts)
    (on_ground ?hub1 - hub)
    (fastened ?hub1 - hub)
    (jacked_up ?hub1 - hub ?jack1 - jack)
    (free ?hub1 - hub)
    (unfastened ?hub1 - hub)
    (have_pump ?pump1 - pump)
    (pump_in ?pump1 - pump ?boot1 - boot)
    (have_wheel ?wheel1 - wheel)
    (wheel_in ?wheel1 - wheel ?boot1 - boot)
    (wheel_on ?wheel1 - wheel ?hub1 - hub)
    (have_wrench ?wrench1 - wrench)
    (wrench_in ?wrench1 - wrench ?boot1 - boot)
    (have_jack ?jack1 - jack)
    (jack_in_use ?jack1 - jack ?hub1 - hub)
    (jack_in ?jack1 - jack ?boot1 - boot)

Can you match these up with the automatically generated predicates ?
E.g.  (open ?boot1 - boot) =  (boot_state0 ?v1 - boot)

Exercise 2
Compare an action or two with the hand crafted domain model. Do they look the same?

4. TO TRY LOCM ON OTHER DOMAINS
Let us induce the 'rocket' domain model. This is a lot simpler that the tyre domain. Go into the 'prolog' directory and edit the file:
networka.pl
This is the main Prolog code. Comment out the command
:- include('ex/tyre.pl').
by placing a "%" in front of it:
% :- include('ex/tyre.pl').

Now uncomment the line:
% :-include('ex/rocket.pl').
by removing the "%", and save the file.

Now repeat STEP 2 above, and you will get LOCM to learn the rocket domain model. Also repeat STEP 3 to do the comparisons.







 


